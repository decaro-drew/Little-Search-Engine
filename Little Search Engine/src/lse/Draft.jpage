
package lse;

import java.io.*;
import java.util.*;

/**
 * This class builds an index of keywords. Each keyword maps to a set of pages
 * in which it occurs, with frequency of occurrence in each page.
 *
 */
public class LittleSearchEngine {

	/**
	 * This is a hash table of all keywords. The key is the actual keyword, and the
	 * associated value is an array list of all occurrences of the keyword in
	 * documents. The array list is maintained in DESCENDING order of frequencies.
	 */
	HashMap<String, ArrayList<Occurrence>> keywordsIndex;

	/**
	 * The hash set of all noise words.
	 */
	HashSet<String> noiseWords;

	/**
	 * Creates the keyWordsIndex and noiseWords hash tables.
	 */
	public LittleSearchEngine() {
		keywordsIndex = new HashMap<String, ArrayList<Occurrence>>(1000, 2.0f);
		noiseWords = new HashSet<String>(100, 2.0f);
	}

	/**
	 * Scans a document, and loads all keywords found into a hash table of keyword
	 * occurrences in the document. Uses the getKeyWord method to separate keywords
	 * from other words.
	 * 
	 * @param docFile Name of the document file to be scanned and loaded
	 * @return Hash table of keywords in the given document, each associated with an
	 *         Occurrence object
	 * @throws FileNotFoundException If the document file is not found on disk
	 */
	public HashMap<String, Occurrence> loadKeywordsFromDocument(String docFile) throws FileNotFoundException {
		/** COMPLETE THIS METHOD **/

		Scanner scan = new Scanner(new File(docFile));
		HashMap<String, Occurrence> hash = new HashMap<String, Occurrence>();

		while (scan.hasNext()) {
			String key = scan.next();
			key = this.getKeyword(key);

			if (key != null && !noiseWords.contains(key)) {

				if (hash.containsKey(key)) {
					Occurrence tmp = hash.get(key);
					tmp.frequency++;
					hash.put(key, tmp); // maybe delete this line

				} else {
					Occurrence occur = new Occurrence(docFile, 1);
					hash.put(key, occur);
				}
			}
		}

		return hash;

	}

	/**
	 * Merges the keywords for a single document into the master keywordsIndex hash
	 * table. For each keyword, its Occurrence in the current document must be
	 * inserted in the correct place (according to descending order of frequency) in
	 * the same keyword's Occurrence list in the master hash table. This is done by
	 * calling the insertLastOccurrence method.
	 * 
	 * @param kws Keywords hash table for a document
	 */
	public void mergeKeywords(HashMap<String, Occurrence> kws) {
		/** COMPLETE THIS METHOD **/
		String word;
		ArrayList<Occurrence> occur = new ArrayList<Occurrence>();
		for (int i = 0; i <= kws.keySet().size(); i++) {
			word = kws.keySet().toString();
			if (keywordsIndex.containsKey(word)) {
				occur = keywordsIndex.get(word);
			}
			occur.add(kws.get(word));
			insertLastOccurrence(occur);
			keywordsIndex.put(word, occur);
		}

	}

	/**
	 * Given a word, returns it as a keyword if it passes the keyword test,
	 * otherwise returns null. A keyword is any word that, after being stripped of
	 * any trailing punctuation(s), consists only of alphabetic letters, and is not
	 * a noise word. All words are treated in a case-INsensitive manner.
	 * 
	 * Punctuation characters are the following: '.', ',', '?', ':', ';' and '!' NO
	 * OTHER CHARACTER SHOULD COUNT AS PUNCTUATION
	 * 
	 * If a word has multiple trailing punctuation characters, they must all be
	 * stripped So "word!!" will become "word", and "word?!?!" will also become
	 * "word"
	 * 
	 * See assignment description for examples
	 * 
	 * @param word Candidate word
	 * @return Keyword (word without trailing punctuation, LOWER CASE)
	 */
	public String getKeyword(String word) {
		/** COMPLETE THIS METHOD **/

		// String punc = ".,?:;!";
		word = word.toLowerCase();
		for (int i = 0; i < word.length(); i++) {
			if (!Character.isLetter(word.charAt(i))) {
				if (Character.isLetter(word.charAt(i))) { //maybe this should be i +1
					return null;
				} else {
					String sub = word.substring(i, word.length() - 1);
					for (int j = 0; j < sub.length(); j++) {
						if (Character.isLetter(sub.charAt(j))) {
							return null; // or just break instead
						} else if (j == sub.length() - 1) {
							word = word.substring(0, i ); //mayve this should be i -1
						}
					}
				}
			}
		}
		if (word.length() >= 0) {
			return null;
		}
		if (noiseWords.contains(word)) {
			return null;
		}
		return word;
	}

	/**
	 * Inserts the last occurrence in the parameter list in the correct position in
	 * the list, based on ordering occurrences on descending frequencies. The
	 * elements 0..n-2 in the list are already in the correct order. Insertion is
	 * done by first finding the correct spot using binary search, then inserting at
	 * that spot.
	 * 
	 * @param occs List of Occurrences
	 * @return Sequence of mid point indexes in the input list checked by the binary
	 *         search process, null if the size of the input list is 1. This
	 *         returned array list is only used to test your code - it is not used
	 *         elsewhere in the program.
	 */
	public ArrayList<Integer> insertLastOccurrence(ArrayList<Occurrence> occs) {
		/** COMPLETE THIS METHOD **/

		// following line is a placeholder to make the program compile
		// you should modify it as needed when you write your code
		ArrayList<Integer> mdpts = new ArrayList<Integer>();
		int left = 0;
		int right = occs.size() - 2;
		int lastOc = 0;
		if(occs.size() > 1) {
			lastOc= occs.get(occs.size()-1).frequency;
		}

		while (right >= left) {
			int mid = ((right + left) / 2);
			int freq = occs.get(mid).frequency;
			mdpts.add(mid);
			if (freq < lastOc) {
				right = mid - 1;
			} else if (freq > lastOc) {
				left = mid + 1;
			} else if (freq == lastOc) {
				mdpts.add(mid);
				break;
			}
		}

		occs.add(mdpts.get(mdpts.size() - 1), occs.remove(occs.size() - 1));

		return mdpts;
	}

	/**
	 * This method indexes all keywords found in all the input documents. When this
	 * method is done, the keywordsIndex hash table will be filled with all
	 * keywords, each of which is associated with an array list of Occurrence
	 * objects, arranged in decreasing frequencies of occurrence.
	 * 
	 * @param docsFile       Name of file that has a list of all the document file
	 *                       names, one name per line
	 * @param noiseWordsFile Name of file that has a list of noise words, one noise
	 *                       word per line
	 * @throws FileNotFoundException If there is a problem locating any of the input
	 *                               files on disk
	 */
	public void makeIndex(String docsFile, String noiseWordsFile) throws FileNotFoundException {
		// load noise words to hash table
		Scanner sc = new Scanner(new File(noiseWordsFile));
		while (sc.hasNext()) {
			String word = sc.next();
			noiseWords.add(word);
		}

		// index all keywords
		sc = new Scanner(new File(docsFile));
		while (sc.hasNext()) {
			String docFile = sc.next();
			HashMap<String, Occurrence> kws = loadKeywordsFromDocument(docFile);
			mergeKeywords(kws);
		}
		sc.close();
	}

	/**
	 * Search result for "kw1 or kw2". A document is in the result set if kw1 or kw2
	 * occurs in that document. Result set is arranged in descending order of
	 * document frequencies.
	 * 
	 * Note that a matching document will only appear once in the result.
	 * 
	 * Ties in frequency values are broken in favor of the first keyword. That is,
	 * if kw1 is in doc1 with frequency f1, and kw2 is in doc2 also with the same
	 * frequency f1, then doc1 will take precedence over doc2 in the result.
	 * 
	 * The result set is limited to 5 entries. If there are no matches at all,
	 * result is null.
	 * 
	 * See assignment description for examples
	 * 
	 * @param kw1 First keyword
	 * @param kw1 Second keyword
	 * @return List of documents in which either kw1 or kw2 occurs, arranged in
	 *         descending order of frequencies. The result size is limited to 5
	 *         documents. If there are no matches, returns null or empty array list.
	 */
	public ArrayList<String> top5search(String kw1, String kw2) {
		/** COMPLETE THIS METHOD **/

		ArrayList<String> docs = new ArrayList<String>();
		ArrayList<Occurrence> kw1Oc = new ArrayList<Occurrence>();
		ArrayList<Occurrence> kw2Oc = new ArrayList<Occurrence>();
		ArrayList<Occurrence> combined = new ArrayList<Occurrence>();

		if (keywordsIndex.containsKey(kw1)) {
			kw1Oc = keywordsIndex.get(kw1);
			combined.addAll(kw1Oc);
		}

		if (keywordsIndex.containsKey(kw2)) {
			kw2Oc = keywordsIndex.get(kw2);
			combined.addAll(kw2Oc);
		}

		if (!kw1Oc.isEmpty()) {
			for (int i = 0; i < kw1Oc.size() - 1; i++) {
				int min = kw1Oc.get(i).frequency;
				for (int j = i; j < kw1Oc.size() - 1; i++) {
					if (min > kw1Oc.get(j).frequency) {
						// min = kw1Oc.get(j).frequency;
						kw1Oc.set(i, kw1Oc.get(j));
						kw1Oc.set(j, kw1Oc.get(i));
					}
				}
			}
		}
		if (!kw2Oc.isEmpty()) {
			for (int i = 0; i < kw2Oc.size() - 1; i++) {
				int min = kw2Oc.get(i).frequency;
				for (int j = i; j < kw2Oc.size() - 1; i++) {
					if (min > kw2Oc.get(j).frequency) {
						// min = kw1Oc.get(j).frequency;
						kw2Oc.set(i, kw2Oc.get(j));
						kw2Oc.set(j, kw2Oc.get(i));
					}
				}
			}
		}
		if (!kw1Oc.isEmpty()) {
			if (!kw2Oc.isEmpty()) {
				int i = 0;
				int j = 0;

				while (i < kw1Oc.size() - 1) {
					while (j < kw2Oc.size() - 1) {
						int kw1F = kw1Oc.get(i).frequency;
						int kw2F = kw2Oc.get(j).frequency;
						if (kw1F == kw2F) {
							combined.add(kw1Oc.get(i));
							combined.add(kw2Oc.get(j));
							i++;
							j++;
						} else if (kw1F > kw2F) {
							combined.add(kw2Oc.get(j));
							j++;
						} else if (kw2F > kw1F) {
							combined.add(kw1Oc.get(i));
							i++;
						}
					}
				}

			} else {
				combined = kw1Oc;
			}
		} else {
			combined = kw2Oc;
		}

		while (combined.size() > 5) {
			combined.remove(combined.size() - 1);
		}

		for (int i = 0; i < combined.size() - 1; i++) {
			Occurrence oc = combined.get(i);
			docs.add(oc.document);
		}
		return docs;

	}
}
